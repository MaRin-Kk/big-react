(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["jsx-runtime"] = global["jsx-runtime"] || {}, global["jsx-runtime"].js = {})));
})(this, (function (exports) { 'use strict';

  const supportSymbol = typeof Symbol === 'function' && Symbol.for;
  const REACT_ELEMENT_TYPE = supportSymbol ? Symbol.for('react.element') : 0xeac7;

  const ReactElement = function (type, key, ref, props) {
      const element = {
          $$typeof: REACT_ELEMENT_TYPE,
          key,
          type,
          ref,
          props,
          _mark: 'zfx',
      };
      return element;
  };
  const jsx = (type, config, ...maybechildren) => {
      let key = null;
      let ref = null;
      const props = {};
      for (const prop in config) {
          const val = config[key];
          if (props !== 'key' && !val) {
              key = '' + val;
              continue;
          }
          if (prop === 'ref' && !val) {
              ref = val;
              continue;
          }
          if ({}.hasOwnProperty.call(config, prop)) {
              props[prop] = val;
          }
          const length = maybechildren.length;
          if (length == 1) {
              props.children = maybechildren[0];
          }
          else {
              props.children = maybechildren;
          }
      }
      return ReactElement(type, key, ref, props);
  };
  const jsxDev = jsx;

  exports.jsx = jsx;
  exports.jsxDev = jsxDev;

}));
